// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name THEOplayerSDK
import AVFoundation
import AVKit
import CommonCrypto
import CoreData
import CoreGraphics
import CoreMedia
import Foundation
import MediaPlayer
import Swift
import SystemConfiguration
@_exported import THEOplayerSDK
import UIKit
import WebKit
public struct CacheEventTypes {
  public static var STATE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.CacheEvent>
}
public enum AdPreloadType : Swift.String, Swift.Encodable {
  case NONE
  case MIDROLL_AND_POSTROLL
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public class ChromecastMetadataDescription : THEOplayerSDK.MetadataDescription {
  @objc public var images: [THEOplayerSDK.ChromecastMetadataImage]?
  @objc public var releaseDate: Swift.String?
  public var releaseYear: Swift.Int?
  @objc public var subtitle: Swift.String?
  public var type: THEOplayerSDK.ChromecastMetadataType?
  public init(images: [THEOplayerSDK.ChromecastMetadataImage]? = nil, releaseDate: Swift.String? = nil, releaseYear: Swift.Int? = nil, title: Swift.String? = nil, subtitle: Swift.String? = nil, type: THEOplayerSDK.ChromecastMetadataType? = .GENERIC, metadataKeys: [Swift.String : Any]? = nil)
  required convenience public init(from decoder: Swift.Decoder) throws
  override public func encode(to encoder: Swift.Encoder) throws
  @objc override public init(metadataKeys: [Swift.String : Any]?, title: Swift.String? = super)
  @objc deinit
}
@objc public class ChromecastMetadataImage : ObjectiveC.NSObject, Swift.Codable {
  @objc public var src: Swift.String
  @objc public var width: Swift.Int
  @objc public var height: Swift.Int
  @objc public init(src: Swift.String, width: Swift.Int = 0, height: Swift.Int = 0)
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum ChromecastMetadataType : Swift.String, Swift.Codable {
  case MOVIE
  case AUDIO
  case TV_SHOW
  case GENERIC
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public class EzdrmDRMConfiguration : THEOplayerSDK.FairPlayDRMConfiguration {
  public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = nil)
  required public init(from decoder: Swift.Decoder) throws
  override public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = super, licenseType: THEOplayerSDK.LicenseType? = super)
  @objc deinit
}
public class ComcastDRMConfiguration : THEOplayerSDK.FairPlayDRMConfiguration {
  public var releasePid: Swift.String
  public var token: Swift.String
  public var accountId: Swift.String
  public init(licenseAcquisitionURL: Swift.String, releasePid: Swift.String, token: Swift.String, accountId: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = nil)
  override public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  override public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = super, licenseType: THEOplayerSDK.LicenseType? = super)
  @objc deinit
}
public protocol CueEventProtocol : THEOplayerSDK.EventProtocol {
  var cue: THEOplayerSDK.TextTrackCue { get }
}
public class CueEnterEvent : THEOplayerSDK.CueEventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var cue: THEOplayerSDK.TextTrackCue {
    get
    }
  @objc deinit
}
public class CueExitEvent : THEOplayerSDK.CueEventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var cue: THEOplayerSDK.TextTrackCue {
    get
    }
  @objc deinit
}
public class CueUpdateEvent : THEOplayerSDK.CueEventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var cue: THEOplayerSDK.TextTrackCue {
    get
    }
  @objc deinit
}
public class CastError {
  final public let errorCode: THEOplayerSDK.ErrorCode
  final public let description: Swift.String?
  @objc deinit
}
public enum ErrorCode : Swift.String {
  case cancel
  case timeout
  case apiNotInitialized
  case invalidParameter
  case extensionNotCompatible
  case extensionMissing
  case receiverUnavailable
  case sessionError
  case channelError
  case loadMediaFailed
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public class UIConfiguration : Swift.Encodable {
  public init(language: Swift.String)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol EventDispatcherProtocol {
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
@objc public class THEOAdDescription : ObjectiveC.NSObject, THEOplayerSDK.AdDescription {
  public var integration: THEOplayerSDK.AdIntegration?
  @objc public var src: Foundation.URL
  @objc public var timeOffset: Swift.String?
  @objc public var skipOffset: Swift.String?
  @objc public init(src: Swift.String, timeOffset: Swift.String? = nil, skipOffset: Swift.String? = nil)
  required convenience public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 11.0, *)
extension SourceDescription {
  @objc dynamic public var vr: THEOplayerSDK.VRConfiguration? {
    @objc get
    @objc set
  }
  convenience public init(sources: [THEOplayerSDK.TypedSource], ads: [THEOplayerSDK.AdDescription]? = nil, textTracks: [THEOplayerSDK.TextTrackDescription]? = nil, poster: Swift.String? = nil, analytics: [THEOplayerSDK.AnalyticsDescription]? = [], metadata: THEOplayerSDK.MetadataDescription? = nil, vr: THEOplayerSDK.VRConfiguration? = nil)
  convenience public init(source: THEOplayerSDK.TypedSource, ads: [THEOplayerSDK.AdDescription]? = nil, textTracks: [THEOplayerSDK.TextTrackDescription]? = nil, poster: Swift.String? = nil, analytics: [THEOplayerSDK.AnalyticsDescription]? = [], metadata: THEOplayerSDK.MetadataDescription? = nil, vr: THEOplayerSDK.VRConfiguration? = nil)
}
@objc public class ConvivaConfiguration : ObjectiveC.NSObject, THEOplayerSDK.AnalyticsDescription {
  public var integration: THEOplayerSDK.AnalyticsIntegration?
  @objc public var customerKey: Swift.String {
    get
    }
  public var heartbeatInterval: Swift.Int? {
    get
    }
  @objc public var gatewayUrl: Swift.String? {
    get
    }
  @objc public var contentMetadata: THEOplayerSDK.ConvivaContentMetadata {
    get
    }
  public var manualSessionControl: Swift.Bool? {
    get
    }
  public init(customerKey: Swift.String, heartbeatInterval: Swift.Int? = nil, gatewayURL: Swift.String? = nil, contentMetadata: THEOplayerSDK.ConvivaContentMetadata, manualSessionControl: Swift.Bool? = false)
  required convenience public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
public enum ReadyState : Swift.Int {
  case HAVE_NOTHING
  case HAVE_METADATA
  case HAVE_CURRENT_DATA
  case HAVE_FUTURE_DATA
  case HAVE_ENOUGH_DATA
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class KeySystemConfiguration : ObjectiveC.NSObject, Swift.Codable {
  @objc public var licenseAcquisitionURL: Foundation.URL?
  @objc public var certificateURL: Foundation.URL?
  public var licenseType: THEOplayerSDK.LicenseType?
  public init(licenseAcquisitionURL: Swift.String? = nil, certificateURL: Swift.String? = nil, licenseType: THEOplayerSDK.LicenseType? = nil)
  required convenience public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
public protocol DRMConfiguration : Swift.Decodable, Swift.Encodable {
  var headers: [[Swift.String : Swift.String]]? { get }
  var integration: THEOplayerSDK.DRMIntegration? { get }
}
public protocol FairPlayDRMConfigurationProtocol : THEOplayerSDK.DRMConfiguration {
  var fairplay: THEOplayerSDK.KeySystemConfiguration { get }
}
public protocol WidevineDRMConfigurationProtocol : THEOplayerSDK.DRMConfiguration {
  var widevine: THEOplayerSDK.KeySystemConfiguration { get }
}
public enum LicenseType : Swift.String, Swift.Codable {
  case temporary
  case persistent
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum DRMIntegration : Swift.String, Swift.Codable {
  case azure
  case axinom
  case ezdrm
  case uplynk
  case irdeto
  case drmtoday
  case vudrm
  case xstream
  case verimatrix
  case vimond
  case keyos
  case comcast
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol TextTrackList : THEOplayerSDK.EventDispatcherProtocol {
  var count: Swift.Int { get }
  func get(_ index: Swift.Int) -> THEOplayerSDK.TextTrack
  subscript(index: Swift.Int) -> THEOplayerSDK.TextTrack { get set }
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public protocol Omid {
  func addFriendlyObstruction(friendlyObstruction: THEOplayerSDK.OmidFriendlyObstruction)
  func removeFriendlyObstructions()
}
public class OmidFriendlyObstruction {
  public init(view: UIKit.UIView, purpose: THEOplayerSDK.OmidFriendlyObstructionPurpose, detailedReason: Swift.String?)
  @objc deinit
}
public protocol EventProtocol {
  var type: Swift.String { get }
  var date: Foundation.Date { get }
}
public class AudioQuality {
  public var audioSamplingRate: Swift.Int {
    get
    }
  public var bandwidth: Swift.Int {
    get
    }
  public var codecs: Swift.String {
    get
    }
  public var id: Swift.Int {
    get
    }
  public var name: Swift.String {
    get
    }
  @objc deinit
}
extension THEOplayer {
  @objc dynamic public func addGestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer)
  @objc dynamic public func removeGestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer)
  public var gestureRecognizers: [UIKit.UIGestureRecognizer]? {
    get
  }
}
public enum Preload : Swift.String {
  case none
  case auto
  case metadata
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
extension THEOplayer {
  public var fullscreen: THEOplayerSDK.Fullscreen {
    get
  }
}
public protocol Fullscreen : THEOplayerSDK.EventDispatcherProtocol {
  var aspectRatio: THEOplayerSDK.AspectRatio { get }
  var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask { get }
  func setAspectRatio(aspectRatio: THEOplayerSDK.AspectRatio)
  func setSupportedInterfaceOrientations(supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask)
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public enum AspectRatio {
  case fit
  case fill
  case aspectFill
  public static func == (a: THEOplayerSDK.AspectRatio, b: THEOplayerSDK.AspectRatio) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct VideoTrackListEventTypes {
  public static var ADD_TRACK: THEOplayerSDK.EventType<THEOplayerSDK.AddTrackEvent>
  public static var REMOVE_TRACK: THEOplayerSDK.EventType<THEOplayerSDK.RemoveTrackEvent>
  public static var CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.TrackChangeEvent>
}
public protocol CachingTaskLicense {
  func renew()
  func renew(_ drmConfiguation: THEOplayerSDK.DRMConfiguration)
}
public protocol TextTrack : THEOplayerSDK.Track {
  var inBandMetadataTrackDispatchType: Swift.String { get }
  var mode: THEOplayerSDK.TextTrackMode { get set }
  var cues: [THEOplayerSDK.TextTrackCue] { get }
  var activeCues: [THEOplayerSDK.TextTrackCue] { get }
  var type: Swift.String { get }
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public class UplynkDRMConfiguration : THEOplayerSDK.FairPlayDRMConfiguration {
  public init(licenseAcquisitionURL: Swift.String? = nil, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = nil)
  required public init(from decoder: Swift.Decoder) throws
  override public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = super, licenseType: THEOplayerSDK.LicenseType? = super)
  @objc deinit
}
public protocol AdDescription : Swift.Decodable, Swift.Encodable {
  var integration: THEOplayerSDK.AdIntegration? { get }
}
public enum AdIntegration : Swift.String, Swift.Codable {
  case theo
  case google_ima
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public class SourceDescription : ObjectiveC.NSObject, Swift.Codable {
  @objc public var sources: [THEOplayerSDK.TypedSource] {
    @objc get
    @objc set
  }
  @objc public var textTracks: [THEOplayerSDK.TextTrackDescription]? {
    @objc get
    @objc set
  }
  @objc public var poster: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc public var metadata: THEOplayerSDK.MetadataDescription? {
    @objc get
    @objc set
  }
  public init(sources: [THEOplayerSDK.TypedSource], textTracks: [THEOplayerSDK.TextTrackDescription]? = nil, ads: [THEOplayerSDK.AdDescription]? = nil, poster: Swift.String? = nil, metadata: THEOplayerSDK.MetadataDescription? = nil)
  public init(source: THEOplayerSDK.TypedSource, textTracks: [THEOplayerSDK.TextTrackDescription]? = nil, ads: [THEOplayerSDK.AdDescription]? = nil, poster: Swift.String? = nil, metadata: THEOplayerSDK.MetadataDescription? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public protocol Ads : THEOplayerSDK.EventDispatcherProtocol {
  func requestPlaying(completionHandler: @escaping (Swift.Bool?, Swift.Error?) -> Swift.Void)
  func requestCurrentAds(completionHandler: @escaping ([THEOplayerSDK.Ad]?, Swift.Error?) -> Swift.Void)
  func requestCurrentAdBreak(completionHandler: @escaping (THEOplayerSDK.AdBreak?, Swift.Error?) -> Swift.Void)
  func requestScheduledAds(completionHandler: @escaping ([THEOplayerSDK.ScheduledAd]?, Swift.Error?) -> Swift.Void)
  func schedule(adDescription: THEOplayerSDK.AdDescription)
  func skip()
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
  var omid: THEOplayerSDK.Omid { get }
}
public protocol AdEventProtocol : THEOplayerSDK.EventProtocol {
  var ad: THEOplayerSDK.Ad? { get }
}
public protocol AdErrorEventProtocol : THEOplayerSDK.EventProtocol {
  var ad: THEOplayerSDK.Ad? { get }
  var error: Swift.String? { get }
}
public protocol AdBreakEventProtocol : THEOplayerSDK.EventProtocol {
  var ad: THEOplayerSDK.AdBreak? { get }
}
public class AdEvent : THEOplayerSDK.AdEventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var ad: THEOplayerSDK.Ad? {
    get
    }
  public var currentTime: Swift.Double? {
    get
    }
  @objc deinit
}
public class AdBeginEvent : THEOplayerSDK.AdEvent {
  @objc deinit
}
public class AdEndEvent : THEOplayerSDK.AdEvent {
  @objc deinit
}
public class AdFirstQuartileEvent : THEOplayerSDK.AdEvent {
  @objc deinit
}
public class AdMidpointEvent : THEOplayerSDK.AdEvent {
  @objc deinit
}
public class AdThirdQuartileEvent : THEOplayerSDK.AdEvent {
  @objc deinit
}
public class AdLoadedEvent : THEOplayerSDK.AdEvent {
  @objc deinit
}
public class AdImpressionEvent : THEOplayerSDK.AdEvent {
  @objc deinit
}
public class AdErrorEvent : THEOplayerSDK.AdErrorEventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var ad: THEOplayerSDK.Ad? {
    get
    }
  public var error: Swift.String? {
    get
    }
  @objc deinit
}
public class AdBreakEvent : THEOplayerSDK.AdBreakEventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var ad: THEOplayerSDK.AdBreak? {
    get
    }
  @objc deinit
}
public class AdBreakBeginEvent : THEOplayerSDK.AdBreakEvent {
  @objc deinit
}
public class AdBreakEndEvent : THEOplayerSDK.AdBreakEvent {
  @objc deinit
}
public enum SkippedAdStrategy : Swift.String, Swift.Encodable, Swift.CaseIterable {
  case PLAY_ALL
  case PLAY_NONE
  case PLAY_LAST
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [THEOplayerSDK.SkippedAdStrategy]
  public static var allCases: [THEOplayerSDK.SkippedAdStrategy] {
    get
  }
}
public class VerizonMediaConfiguration : Swift.Encodable {
  public init(defaultSkipOffset: Swift.Int? = -1, onSeekOverAd: THEOplayerSDK.SkippedAdStrategy? = .PLAY_NONE, ui: THEOplayerSDK.VerizonMediaUiConfiguration? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public class IrdetoDRMConfiguration : THEOplayerSDK.FairPlayDRMConfiguration {
  public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, crmId: Swift.String, accountId: Swift.String, contentId: Swift.String, keyId: Swift.String, applicationId: Swift.String, sessionId: Swift.String? = nil, ticket: Swift.String? = nil, headers: [[Swift.String : Swift.String]]? = nil)
  override public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  override public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = super, licenseType: THEOplayerSDK.LicenseType? = super)
  @objc deinit
}
public class AspectRatioChangeEvent : THEOplayerSDK.EventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var aspectRatio: THEOplayerSDK.AspectRatio {
    get
    }
  @objc deinit
}
public protocol AVPlayerError : THEOplayerSDK.THEOError {
}
public struct TextTrackEventTypes {
  public static var CUE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.CueChangeEvent>
  public static var ADD_CUE: THEOplayerSDK.EventType<THEOplayerSDK.AddCueEvent>
  public static var REMOVE_CUE: THEOplayerSDK.EventType<THEOplayerSDK.RemoveCueEvent>
  public static var ENTER_CUE: THEOplayerSDK.EventType<THEOplayerSDK.EnterCueEvent>
  public static var EXIT_CUE: THEOplayerSDK.EventType<THEOplayerSDK.ExitCueEvent>
}
public enum Boundary : Swift.Decodable {
  case c3(THEOplayerSDK.BoundaryC3)
  case c7(THEOplayerSDK.BoundaryC7)
  case halfTime(THEOplayerSDK.BoundaryHalftime)
  public init(from decoder: Swift.Decoder) throws
}
public struct BoundaryC3 : Swift.Decodable {
  public var c3: THEOplayerSDK.BoundaryInfo
  public init(from decoder: Swift.Decoder) throws
}
public struct BoundaryC7 : Swift.Decodable {
  public var c7: THEOplayerSDK.BoundaryInfo
  public init(from decoder: Swift.Decoder) throws
}
public struct BoundaryHalftime : Swift.Decodable {
  public var halftime: THEOplayerSDK.BoundaryInfo
  public init(from decoder: Swift.Decoder) throws
}
public struct BoundaryInfo : Swift.Decodable {
  public var duration: Swift.Double
  public var offset: Swift.Double
  public init(from decoder: Swift.Decoder) throws
}
public protocol RelatedContent : THEOplayerSDK.EventDispatcherProtocol {
  var sources: [THEOplayerSDK.RelatedContentSource] { get set }
  func show()
  func hide()
  var showing: Swift.Bool { get }
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public class AdType : Swift.Codable {
  public static let linear: Swift.String
  public static let nonlinear: Swift.String
  public static let unknown: Swift.String
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol EventListener {
}
public enum TextTrackMode : Swift.String {
  case showing
  case hidden
  case disabled
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol Network : THEOplayerSDK.EventDispatcherProtocol {
}
public struct PlayerEventTypes {
  public static var PLAY: THEOplayerSDK.EventType<THEOplayerSDK.PlayEvent>
  public static var PLAYING: THEOplayerSDK.EventType<THEOplayerSDK.PlayingEvent>
  public static var PAUSE: THEOplayerSDK.EventType<THEOplayerSDK.PauseEvent>
  public static var PROGRESS: THEOplayerSDK.EventType<THEOplayerSDK.ProgressEvent>
  public static var SEEKING: THEOplayerSDK.EventType<THEOplayerSDK.SeekingEvent>
  public static var SEEKED: THEOplayerSDK.EventType<THEOplayerSDK.SeekedEvent>
  public static var WAITING: THEOplayerSDK.EventType<THEOplayerSDK.WaitingEvent>
  public static var TIME_UPDATE: THEOplayerSDK.EventType<THEOplayerSDK.TimeUpdateEvent>
  public static var ENDED: THEOplayerSDK.EventType<THEOplayerSDK.EndedEvent>
  public static var RATE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.RateChangeEvent>
  public static var READY_STATE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.ReadyStateChangeEvent>
  public static var LOADED_META_DATA: THEOplayerSDK.EventType<THEOplayerSDK.LoadedMetaDataEvent>
  public static var LOADED_DATA: THEOplayerSDK.EventType<THEOplayerSDK.LoadedDataEvent>
  public static var LOAD_START: THEOplayerSDK.EventType<THEOplayerSDK.LoadStartEvent>
  public static var CAN_PLAY: THEOplayerSDK.EventType<THEOplayerSDK.CanPlayEvent>
  public static var CAN_PLAY_THROUGH: THEOplayerSDK.EventType<THEOplayerSDK.CanPlayThroughEvent>
  public static var ERROR: THEOplayerSDK.EventType<THEOplayerSDK.ErrorEvent>
  public static var DURATION_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.DurationChangeEvent>
  public static var SOURCE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.SourceChangeEvent>
  public static var PRESENTATION_MODE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.PresentationModeChangeEvent>
  public static var VOLUME_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.VolumeChangeEvent>
  public static var RESIZE: THEOplayerSDK.EventType<THEOplayerSDK.ResizeEvent>
  public static var DESTROY: THEOplayerSDK.EventType<THEOplayerSDK.DestroyEvent>
}
public class PiPConfiguration : Swift.Codable {
  public var retainPresentationModeOnSourceChange: Swift.Bool
  public init(retainPresentationModeOnSourceChange: Swift.Bool = false)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class GoogleDAILiveConfiguration : THEOplayerSDK.GoogleDAIConfiguration {
  public var assetKey: Swift.String
  public init(assetKey: Swift.String, apiKey: Swift.String, authToken: Swift.String?, streamActivityMonitorID: Swift.String?, adTagParameters: [Swift.String : Swift.String]?)
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public enum PresentationMode : Swift.String {
  case inline
  case fullscreen
  case pictureInPicture
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol PictureInPicture {
  var currentCorner: THEOplayerSDK.PictureInPictureCorner? { get }
  func configure(movable: Swift.Bool?, defaultCorner: THEOplayerSDK.PictureInPictureCorner?, scale: Swift.Float?, visibility: Swift.Double?, margin: THEOplayerSDK.THEOMargins?)
}
extension PictureInPicture {
  public func configure(movable: Swift.Bool?, defaultCorner: THEOplayerSDK.PictureInPictureCorner?, scale: Swift.Float?)
  public func configure(movable: Swift.Bool?, defaultCorner: THEOplayerSDK.PictureInPictureCorner?, scale: Swift.Float?, visibility: Swift.Double?)
  public func configure(movable: Swift.Bool?, defaultCorner: THEOplayerSDK.PictureInPictureCorner?, scale: Swift.Float?, margin: THEOplayerSDK.THEOMargins?)
}
public protocol VR : THEOplayerSDK.EventDispatcherProtocol {
  var direction: THEOplayerSDK.VRDirection { get set }
  var stereo: Swift.Bool { get set }
  var verticalFOV: Swift.Int { get set }
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public struct VRDirection {
  public var pitch: Swift.Double
  public var roll: Swift.Double
  public var yaw: Swift.Double
  public init(pitch: Swift.Double? = 0, roll: Swift.Double? = 0, yaw: Swift.Double? = 0)
}
public class EventedArray<Element> : THEOplayerSDK.THEOArray<Element>, THEOplayerSDK.EventDispatcherProtocol {
  public func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  public func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
  override public init()
  @objc deinit
}
public class KeyOSDRMConfiguration : THEOplayerSDK.FairPlayDRMConfiguration {
  public var customdata: Swift.String?
  public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, customdata: Swift.String?, headers: [[Swift.String : Swift.String]]? = nil)
  override public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  override public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = super, licenseType: THEOplayerSDK.LicenseType? = super)
  @objc deinit
}
public protocol Cache : THEOplayerSDK.EventDispatcherProtocol {
  var status: THEOplayerSDK.CacheStatus { get }
  var tasks: [THEOplayerSDK.CachingTask] { get }
  func createTask(source: THEOplayerSDK.SourceDescription, parameters: THEOplayerSDK.CachingParameters?) -> THEOplayerSDK.CachingTask?
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public enum CacheStatus : Swift.String {
  case uninitialised
  case initialised
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct CachingParameters {
  public var expirationDate: Foundation.Date
  public var bandwidth: Swift.Int?
  public init(expirationDate: Foundation.Date, bandwidth: Swift.Int? = nil)
}
public protocol CachingTask : THEOplayerSDK.EventDispatcherProtocol {
  var id: Swift.String { get }
  var status: THEOplayerSDK.CachingTaskStatus { get }
  var source: THEOplayerSDK.SourceDescription { get }
  var parameters: THEOplayerSDK.CachingParameters { get }
  var duration: Swift.Double { get }
  var cached: [THEOplayerSDK.TimeRange] { get }
  var secondsCached: Swift.Double { get }
  var percentageCached: Swift.Double { get }
  var bytesCached: Swift.UInt { get }
  func start()
  func remove()
  func pause()
  var license: THEOplayerSDK.CachingTaskLicense { get }
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public enum CachingTaskStatus : Swift.String {
  case idle
  case loading
  case done
  case error
  case evicted
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension THEOplayer {
  public var ads: THEOplayerSDK.Ads {
    get
  }
  public var pip: THEOplayerSDK.PictureInPicture? {
    get
  }
  public var related: THEOplayerSDK.RelatedContent {
    get
  }
  @objc dynamic public var fullscreenOrientationCoupling: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public func addJavascriptMessageListener(name: Swift.String, listener: @escaping ([Swift.String : Any]) -> ())
  @objc dynamic public func removeJavascriptMessageListener(name: Swift.String)
  @objc dynamic public func evaluateJavaScript(_ javaScriptString: Swift.String, completionHandler: ((Any?, Swift.Error?) -> Swift.Void)? = nil)
  @available(iOS 11.0, *)
  public var vr: THEOplayerSDK.VR? {
    get
    set
  }
  @available(iOS 10.0, *)
  public static var cache: THEOplayerSDK.Cache
  @available(*, deprecated, message: "Use destroy() instead")
  public func unload()
}
public class CueChangeEvent : THEOplayerSDK.TrackEventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var track: THEOplayerSDK.Track {
    get
    }
  @objc deinit
}
public protocol TextTrackCueEventProtocol : THEOplayerSDK.EventProtocol {
  var cue: THEOplayerSDK.TextTrackCue { get }
}
public class AddCueEvent : THEOplayerSDK.TextTrackCueEventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var cue: THEOplayerSDK.TextTrackCue {
    get
    }
  @objc deinit
}
public class RemoveCueEvent : THEOplayerSDK.TextTrackCueEventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var cue: THEOplayerSDK.TextTrackCue {
    get
    }
  @objc deinit
}
public class EnterCueEvent : THEOplayerSDK.TextTrackCueEventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var cue: THEOplayerSDK.TextTrackCue {
    get
    }
  @objc deinit
}
public class ExitCueEvent : THEOplayerSDK.TextTrackCueEventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var cue: THEOplayerSDK.TextTrackCue {
    get
    }
  @objc deinit
}
public protocol NetworkError : THEOplayerSDK.THEOError {
  var url: Swift.String? { get }
  var status: Swift.Int { get }
  var errorComment: Swift.String? { get }
}
public class EventType<T> where T : THEOplayerSDK.EventProtocol {
  public var name: Swift.String {
    get
    }
  @objc deinit
}
public struct AudioTrackListEventTypes {
  public static var ADD_TRACK: THEOplayerSDK.EventType<THEOplayerSDK.AddTrackEvent>
  public static var REMOVE_TRACK: THEOplayerSDK.EventType<THEOplayerSDK.RemoveTrackEvent>
  public static var CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.TrackChangeEvent>
}
public struct TextTrackCueEventTypes {
  public static var ENTER: THEOplayerSDK.EventType<THEOplayerSDK.CueEnterEvent>
  public static var EXIT: THEOplayerSDK.EventType<THEOplayerSDK.CueExitEvent>
  public static var UPDATE: THEOplayerSDK.EventType<THEOplayerSDK.CueUpdateEvent>
}
@objc public class MetadataDescription : ObjectiveC.NSObject, Swift.Codable {
  @objc public var metadataKeys: [Swift.String : Any]?
  @objc public var title: Swift.String?
  @objc public init(metadataKeys: [Swift.String : Any]?, title: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  required convenience public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc deinit
}
public class AzureDRMConfiguration : THEOplayerSDK.FairPlayDRMConfiguration {
  public var token: Swift.String
  public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, token: Swift.String, headers: [[Swift.String : Swift.String]]? = nil)
  override public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  override public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = super, licenseType: THEOplayerSDK.LicenseType? = super)
  @objc deinit
}
public class FairPlayDRMConfiguration : THEOplayerSDK.FairPlayDRMConfigurationProtocol {
  public var fairplay: THEOplayerSDK.KeySystemConfiguration
  public var integration: THEOplayerSDK.DRMIntegration?
  public var headers: [[Swift.String : Swift.String]]?
  public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = nil, licenseType: THEOplayerSDK.LicenseType? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public class GoogleDAIVodConfiguration : THEOplayerSDK.GoogleDAIConfiguration {
  public var contentSourceID: Swift.String
  public var videoID: Swift.String
  public init(videoID: Swift.String, contentSourceID: Swift.String, apiKey: Swift.String, authToken: Swift.String?, streamActivityMonitorID: Swift.String?, adTagParameters: [Swift.String : Swift.String]?)
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public class VerimatrixDRMConfiguration : THEOplayerSDK.FairPlayDRMConfiguration {
  public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = nil)
  required public init(from decoder: Swift.Decoder) throws
  override public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = super, licenseType: THEOplayerSDK.LicenseType? = super)
  @objc deinit
}
@objc public class EventDispatcher : ObjectiveC.NSObject, THEOplayerSDK.EventDispatcherProtocol {
  @objc public func getMinimizeFunction() -> Swift.String
  public func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  public func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
  @objc deinit
  @objc override dynamic public init()
}
public enum THEOErrorCode : Swift.Int32, Swift.Codable {
  case MEDIA_AVPLAYER_ERROR
  case NETWORK_ERROR
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
public class VerizonMediaUiConfiguration : Swift.Encodable {
  public var contentNotification: Swift.Bool {
    get
    }
  public var adNotification: Swift.Bool {
    get
    }
  public var assetMarkers: Swift.Bool {
    get
    }
  public var adBreakMarkers: Swift.Bool {
    get
    }
  public init(contentNotification: Swift.Bool = true, adNotification: Swift.Bool = true, assetMarkers: Swift.Bool = true, adBreakMarkers: Swift.Bool = true)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
extension TypedSource {
  convenience public init(src: Swift.String, type: Swift.String, drm: THEOplayerSDK.DRMConfiguration? = nil, crossOrigin: THEOplayerSDK.CrossOrigin? = nil, ssai: THEOplayerSDK.ServerSideAdInsertionConfiguration? = nil, hlsDateRange: Swift.Bool? = false)
}
public struct CachingTaskEventTypes {
  public static var STATE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.CacheEvent>
  public static var PROGRESS: THEOplayerSDK.EventType<THEOplayerSDK.CacheEvent>
}
public class NetworkErrorEvent : THEOplayerSDK.EventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var error: THEOplayerSDK.NetworkError? {
    get
    }
  @objc deinit
}
public class DRMTodayDRMConfiguration : THEOplayerSDK.FairPlayDRMConfiguration {
  public var token: Swift.String?
  public var userId: Swift.String?
  public var sessionId: Swift.String?
  public var merchant: Swift.String?
  public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = nil, token: Swift.String? = nil, userId: Swift.String? = nil, sessionId: Swift.String? = nil, merchant: Swift.String? = nil, licenseType: THEOplayerSDK.LicenseType = .temporary)
  override public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  override public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = super, licenseType: THEOplayerSDK.LicenseType? = super)
  @objc deinit
}
public protocol AdBreak {
  var ads: [THEOplayerSDK.Ad] { get }
  var maxDuration: Swift.Int { get }
  var maxRemainingDuration: Swift.Double { get }
  var timeOffset: Swift.Int { get }
}
public protocol MediaTrackList : THEOplayerSDK.EventDispatcherProtocol {
  var count: Swift.Int { get }
  func get(_ index: Swift.Int) -> THEOplayerSDK.MediaTrack
  subscript(index: Swift.Int) -> THEOplayerSDK.MediaTrack { get set }
}
public protocol VideoTrackList : THEOplayerSDK.MediaTrackList {
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public protocol AudioTrackList : THEOplayerSDK.MediaTrackList {
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public enum TextTrackKind : Swift.String, Swift.Codable {
  case subtitles
  case captions
  case description
  case chapters
  case metadata
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum TextTrackFormat : Swift.String, Swift.Codable {
  case WebVTT
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum CrossOrigin : Swift.String, Swift.Codable {
  case none
  case anonymous
  case useCredentials
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum SourceIntegration : Swift.String, Swift.Codable {
  case none
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public class TypedSource : ObjectiveC.NSObject, Swift.Codable {
  @objc public var src: Foundation.URL
  @objc public var type: Swift.String
  public var drm: THEOplayerSDK.DRMConfiguration?
  public var crossOrigin: THEOplayerSDK.CrossOrigin?
  public var hlsDateRange: Swift.Bool?
  public var ssai: THEOplayerSDK.ServerSideAdInsertionConfiguration?
  public init(src: Swift.String, type: Swift.String, drm: THEOplayerSDK.DRMConfiguration? = nil, crossOrigin: THEOplayerSDK.CrossOrigin? = nil, hlsDateRange: Swift.Bool? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  convenience required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc deinit
}
public protocol ServerSideAdInsertionConfiguration {
  var integration: THEOplayerSDK.SSAIIntegrationId? { get }
}
public enum SSAIIntegrationId : Swift.String, Swift.Codable {
  case YospaceSSAIIntegrationID
  case GoogleDAISSAIIntegrationID
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum StreamType : Swift.String, Swift.Codable {
  case live
  case vod
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public class CurrentTimeEvent : THEOplayerSDK.EventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var currentTime: Swift.Double {
    get
    }
  @objc deinit
}
public class PlayEvent : THEOplayerSDK.CurrentTimeEvent {
  @objc deinit
}
public class PlayingEvent : THEOplayerSDK.CurrentTimeEvent {
  @objc deinit
}
public class PauseEvent : THEOplayerSDK.CurrentTimeEvent {
  @objc deinit
}
public class ProgressEvent : THEOplayerSDK.CurrentTimeEvent {
  @objc deinit
}
public class SeekingEvent : THEOplayerSDK.CurrentTimeEvent {
  @objc deinit
}
public class SeekedEvent : THEOplayerSDK.CurrentTimeEvent {
  @objc deinit
}
public class WaitingEvent : THEOplayerSDK.CurrentTimeEvent {
  @objc deinit
}
public class TimeUpdateEvent : THEOplayerSDK.CurrentTimeEvent {
  public var currentProgramDateTime: Foundation.Date? {
    get
    }
  @objc deinit
}
public class EndedEvent : THEOplayerSDK.CurrentTimeEvent {
  @objc deinit
}
public class RateChangeEvent : THEOplayerSDK.CurrentTimeEvent {
  public var playbackRate: Swift.Double {
    get
    }
  @objc deinit
}
public class DurationChangeEvent : THEOplayerSDK.EventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var duration: Swift.Double? {
    get
    }
  @objc deinit
}
public class SourceChangeEvent : THEOplayerSDK.EventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var source: THEOplayerSDK.SourceDescription? {
    get
    }
  @objc deinit
}
public class ReadyStateEvent : THEOplayerSDK.CurrentTimeEvent {
  public var readyState: THEOplayerSDK.ReadyState {
    get
    }
  @objc deinit
}
public class ReadyStateChangeEvent : THEOplayerSDK.ReadyStateEvent {
  @objc deinit
}
public class LoadedMetaDataEvent : THEOplayerSDK.ReadyStateEvent {
  @objc deinit
}
public class LoadedDataEvent : THEOplayerSDK.ReadyStateEvent {
  @objc deinit
}
public class LoadStartEvent : THEOplayerSDK.CurrentTimeEvent {
  @objc deinit
}
public class CanPlayEvent : THEOplayerSDK.ReadyStateEvent {
  @objc deinit
}
public class CanPlayThroughEvent : THEOplayerSDK.ReadyStateEvent {
  @objc deinit
}
public class ErrorEvent : THEOplayerSDK.EventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var error: Swift.String {
    get
    }
  public var errorObject: THEOplayerSDK.THEOError? {
    get
    }
  @objc deinit
}
public class PresentationModeChangeEvent : THEOplayerSDK.EventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var presentationMode: THEOplayerSDK.PresentationMode {
    get
    }
  @objc deinit
}
public class VolumeChangeEvent : THEOplayerSDK.CurrentTimeEvent {
  public var volume: Swift.Float {
    get
    }
  @objc deinit
}
public class ResizeEvent : THEOplayerSDK.EventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  @objc deinit
}
public class DestroyEvent : THEOplayerSDK.EventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  @objc deinit
}
public class VudrmDRMConfiguration : THEOplayerSDK.FairPlayDRMConfiguration {
  public var token: Swift.String
  public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, token: Swift.String, headers: [[Swift.String : Swift.String]]? = nil)
  override public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  override public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = super, licenseType: THEOplayerSDK.LicenseType? = super)
  @objc deinit
}
public enum StereoMode : Swift.String, Swift.Codable {
  case horizontal
  case vertical
  case none
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public class VRConfiguration : ObjectiveC.NSObject, Swift.Codable {
  public var stereoMode: THEOplayerSDK.StereoMode?
  @objc public var vr360: Swift.Bool
  public init(vr360: Swift.Bool = true, stereoMode: THEOplayerSDK.StereoMode? = nil)
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension THEOplayer {
}
public class THEOArray<Element> {
  public init()
  convenience public init(_ array: [Element])
  @objc deinit
}
extension THEOArray {
  public var first: Element? {
    get
  }
  public var last: Element? {
    get
  }
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension THEOArray {
  public func first(where predicate: (Element) -> Swift.Bool) -> Element?
  public func last(where predicate: (Element) -> Swift.Bool) -> Element?
  public func filter(_ isIncluded: @escaping (Element) -> Swift.Bool) -> THEOplayerSDK.THEOArray<Element>
  public func firstIndex(where predicate: (Element) throws -> Swift.Bool) rethrows -> Swift.Int?
  public func sorted(by areInIncreasingOrder: (Element, Element) -> Swift.Bool) -> THEOplayerSDK.THEOArray<Element>
  public func map<ElementOfResult>(_ transform: @escaping (Element) -> ElementOfResult) -> [ElementOfResult]
  public func compactMap<ElementOfResult>(_ transform: (Element) -> ElementOfResult?) -> [ElementOfResult]
  public func reduce<ElementOfResult>(_ initialResult: ElementOfResult, _ nextPartialResult: @escaping (ElementOfResult, Element) -> ElementOfResult) -> ElementOfResult
  public func reduce<ElementOfResult>(into initialResult: ElementOfResult, _ updateAccumulatingResult: @escaping (inout ElementOfResult, Element) -> ()) -> ElementOfResult
  public func forEach(_ body: (Element) -> Swift.Void)
  public func contains(where predicate: (Element) -> Swift.Bool) -> Swift.Bool
  public func allSatisfy(_ predicate: (Element) -> Swift.Bool) -> Swift.Bool
}
extension THEOArray {
  public subscript(index: Swift.Int) -> Element? {
    get
  }
}
extension THEOArray where Element : Swift.Equatable {
  public func contains(_ element: Element) -> Swift.Bool
}
public class Metrics : Swift.Codable {
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AdsEventTypes {
  public static var AD_BEGIN: THEOplayerSDK.EventType<THEOplayerSDK.AdBeginEvent>
  public static var AD_END: THEOplayerSDK.EventType<THEOplayerSDK.AdEndEvent>
  public static var AD_ERROR: THEOplayerSDK.EventType<THEOplayerSDK.AdErrorEvent>
  public static var AD_FIRST_QUARTILE: THEOplayerSDK.EventType<THEOplayerSDK.AdFirstQuartileEvent>
  public static var AD_MIDPOINT: THEOplayerSDK.EventType<THEOplayerSDK.AdMidpointEvent>
  public static var AD_THIRD_QUARTILE: THEOplayerSDK.EventType<THEOplayerSDK.AdThirdQuartileEvent>
  public static var AD_LOADED: THEOplayerSDK.EventType<THEOplayerSDK.AdLoadedEvent>
  public static var AD_IMPRESSION: THEOplayerSDK.EventType<THEOplayerSDK.AdImpressionEvent>
  public static var AD_BREAK_BEGIN: THEOplayerSDK.EventType<THEOplayerSDK.AdBreakBeginEvent>
  public static var AD_BREAK_END: THEOplayerSDK.EventType<THEOplayerSDK.AdBreakEndEvent>
}
@objc public class YouboraOptions : ObjectiveC.NSObject, THEOplayerSDK.AnalyticsDescription {
  public var integration: THEOplayerSDK.AnalyticsIntegration?
  @objc convenience public init(accountCode: Swift.String)
  @objc public func put(key: Swift.String, value: Swift.String)
  @objc public func putMap(key: Swift.String, value: [Swift.String : Swift.String])
  required convenience public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public class CustomAttribute : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  convenience required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public enum DateRangeCustomAttributesError : Swift.Error {
  case castFailed
  public static func == (a: THEOplayerSDK.DateRangeCustomAttributesError, b: THEOplayerSDK.DateRangeCustomAttributesError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public class CustomAttributes : Swift.Codable {
  public func getDouble(for key: Swift.String) throws -> Swift.Double?
  public func getString(for key: Swift.String) throws -> Swift.String?
  public func getBytes(for key: Swift.String) throws -> Foundation.Data?
  public func getAttributesAsDictionary() -> [Swift.String : THEOplayerSDK.CustomAttribute]
  public func encode(to encoder: Swift.Encoder) throws
  convenience required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public class CachingTaskStateChangeEvent : THEOplayerSDK.CacheEvent {
  @objc deinit
}
public class CachingTaskProgressEvent : THEOplayerSDK.CacheEvent {
  @objc deinit
}
public class GoogleIMAConfiguration : Swift.Codable {
  public init(useNativeIma: Swift.Bool = true)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class AdsConfiguration : Swift.Encodable {
  public init(showCountdown: Swift.Bool, preload: THEOplayerSDK.AdPreloadType, googleImaConfiguration: THEOplayerSDK.GoogleIMAConfiguration? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol Ad {
  var adBreak: THEOplayerSDK.AdBreak? { get }
  var companions: [THEOplayerSDK.CompanionAd?] { get }
  var type: Swift.String { get }
  var id: Swift.String? { get }
  var skipOffset: Swift.Int? { get }
  var resourceURI: Swift.String? { get }
  var width: Swift.Int? { get }
  var height: Swift.Int? { get }
  var integration: THEOplayerSDK.AdIntegrationKind { get }
}
public protocol LinearAd : THEOplayerSDK.Ad {
  var duration: Swift.Int? { get }
  var mediaFiles: [THEOplayerSDK.MediaFile] { get }
}
public protocol MediaFile {
  var delivery: Swift.String { get }
  var resourceURI: Swift.String { get }
  var type: Swift.String { get }
  var height: Swift.Int { get }
  var width: Swift.Int { get }
}
public protocol NonLinearAd : THEOplayerSDK.Ad {
  var clickThrough: Swift.String? { get }
}
public protocol ScheduledAd {
  var adBreak: THEOplayerSDK.AdBreak { get }
  var resourceURI: Swift.String { get }
}
public protocol GoogleImaAd : THEOplayerSDK.Ad {
  var adSystem: Swift.String? { get }
  var creativeId: Swift.String? { get }
  var wrapperAdIds: [Swift.String] { get }
  var wrapperAdSystems: [Swift.String] { get }
  var wrapperCreativeIds: [Swift.String] { get }
  var vastMediaBitrate: Swift.Int { get }
}
public enum AdIntegrationKind : Swift.String, Swift.Codable {
  case defaultKind
  case theo
  case freewheel
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol MediaTrack : THEOplayerSDK.Track {
  var enabled: Swift.Bool { get set }
}
public protocol VideoTrack : THEOplayerSDK.MediaTrack {
}
public protocol AudioTrack : THEOplayerSDK.MediaTrack {
  override var enabled: Swift.Bool { get set }
}
public protocol THEOError {
  var name: Swift.String { get }
  var message: Swift.String { get }
  var stack: [Swift.String]? { get }
  var timestamp: Foundation.Date { get }
  var code: THEOplayerSDK.THEOErrorCode { get }
  var cause: THEOplayerSDK.THEOError? { get }
}
public protocol Chromecast : THEOplayerSDK.EventDispatcherProtocol {
  var casting: Swift.Bool { get }
  var error: THEOplayerSDK.CastError? { get }
  var receiverName: Swift.String? { get }
  var source: THEOplayerSDK.SourceDescription? { get set }
  var state: THEOplayerSDK.PlayerCastState? { get }
  func start()
  func stop()
  func join()
  func leave()
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public protocol TextTrackCue : THEOplayerSDK.EventDispatcherProtocol {
  var content: Any? { get }
  var contentString: Swift.String? { get }
  var contentDictionary: [Swift.String : Swift.String]? { get }
  var endTime: Swift.Double? { get }
  var id: Swift.String { get }
  var startTime: Swift.Double? { get }
  var track: THEOplayerSDK.TextTrack? { get }
  func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
}
public protocol WebVttCue : THEOplayerSDK.TextTrackCue {
  var align: Swift.String { get }
  var line: Swift.String { get }
  var lineAlign: Swift.String { get }
  var position: Swift.String { get }
  var positionAlign: Swift.String { get }
  var region: Swift.String? { get }
  var size: Swift.Int { get }
  var snapToLines: Swift.Bool { get }
  var text: Swift.String? { get }
  var vertical: Swift.String { get }
}
public protocol Id3Cue : THEOplayerSDK.TextTrackCue {
}
public protocol DateRangeCue : THEOplayerSDK.TextTrackCue {
  var attributeClass: Swift.String? { get }
  var startDate: Foundation.Date { get }
  var endDate: Foundation.Date? { get }
  var duration: Swift.Double? { get }
  var plannedDuration: Swift.Double? { get }
  var endOnNext: Swift.Bool { get }
  var scte35Cmd: Foundation.Data? { get }
  var scte35Out: Foundation.Data? { get }
  var scte35In: Foundation.Data? { get }
  var customAttributes: THEOplayerSDK.CustomAttributes { get }
}
public enum ABRStrategyType : Swift.String, Swift.Codable {
  case performance
  case quality
  case bandwidth
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct ABRMetadata : Swift.Codable {
  public init(bitrate: Swift.Double)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ABRStrategyConfiguration : Swift.Codable {
  public init(type: THEOplayerSDK.ABRStrategyType, metadata: THEOplayerSDK.ABRMetadata? = nil)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol ABRConfiguration {
  var strategy: THEOplayerSDK.ABRStrategyConfiguration { get set }
  @available(iOS 10.0, *)
  var targetBuffer: Swift.Double { get set }
  var preferredPeakBitRate: Swift.Double { get set }
  @available(iOS 11.0, tvOS 11.0, *)
  var preferredMaximumResolution: CoreGraphics.CGSize { get set }
}
public enum PlayerCastState : Swift.String, Swift.Decodable {
  case unavailable
  case available
  case connecting
  case connected
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum PictureInPictureCorner {
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  public static var `default`: THEOplayerSDK.PictureInPictureCorner {
    get
  }
  public static func == (a: THEOplayerSDK.PictureInPictureCorner, b: THEOplayerSDK.PictureInPictureCorner) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct ChromecastEventTypes {
  public static var STATE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.StateChangeEvent>
  public static var ERROR: THEOplayerSDK.EventType<THEOplayerSDK.CastErrorEvent>
}
public struct THEOMargins {
  public var top: Swift.Int {
    get
    }
  public var right: Swift.Int {
    get
    }
  public var bottom: Swift.Int {
    get
    }
  public var left: Swift.Int {
    get
    }
  public init(top: Swift.Int, right: Swift.Int, bottom: Swift.Int, left: Swift.Int)
  public init(horizontal: Swift.Int, vertical: Swift.Int)
  public init(all: Swift.Int)
}
@objc public protocol THEOScriptMessageHandler : AnyObject {
  @objc func didReceive(message: THEOplayerSDK.THEOScriptMessage)
}
@objc public protocol THEOScriptMessage {
  @objc var body: Any { get }
  @objc var name: Swift.String { get }
  @objc var parsedBodyString: Swift.String? { get }
  @objc var parsedBodyData: Foundation.Data? { get }
  @objc var promise: THEOplayerSDK.Promise? { get }
}
@objc public class RelatedContentSource : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let duration: Swift.String?
  @objc final public let image: Swift.String
  @objc final public let link: Swift.String?
  @objc final public let source: THEOplayerSDK.SourceDescription?
  @objc final public let title: Swift.String?
  @objc convenience public init(image: Swift.String, link: Swift.String, duration: Swift.String? = nil, title: Swift.String? = nil)
  @objc convenience public init(image: Swift.String, source: THEOplayerSDK.SourceDescription, duration: Swift.String? = nil, title: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class VREvent : THEOplayerSDK.EventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  @objc deinit
}
public class VRDirectionChangeEvent : THEOplayerSDK.VREvent {
  @objc deinit
}
public class VRStereoChangeEvent : THEOplayerSDK.VREvent {
  @objc deinit
}
@objc public class THEOplayerConfiguration : ObjectiveC.NSObject, Swift.Encodable {
  @available(*, deprecated, message: "Boolean variable 'pictureInPicture' has been deprecated and replaced by an instance of 'PiPConfiguration'. To avoid this warning, use THEOplayerConfiguration(pip: nil) instead.")
  public init(chromeless: Swift.Bool = false, defaultCSS: Swift.Bool = true, cssPaths: [Swift.String] = [], jsPaths: [Swift.String] = [], jsPathsPre: [Swift.String] = [], googleIMA: Swift.Bool = false, analytics: [THEOplayerSDK.AnalyticsDescription] = [], pictureInPicture: Swift.Bool = false, ads: THEOplayerSDK.AdsConfiguration? = nil, ui: THEOplayerSDK.UIConfiguration? = nil, cast: THEOplayerSDK.CastConfiguration? = nil, hlsDateRange: Swift.Bool? = nil, verizonMedia: THEOplayerSDK.VerizonMediaConfiguration? = nil)
  @available(*, deprecated, message: "Boolean variable 'googleIMA' has been deprecated and replaced by a property googleImaConfiguration in AdsConfiguration")
  public init(chromeless: Swift.Bool = false, defaultCSS: Swift.Bool = true, cssPaths: [Swift.String] = [], jsPaths: [Swift.String] = [], jsPathsPre: [Swift.String] = [], googleIMA: Swift.Bool = false, analytics: [THEOplayerSDK.AnalyticsDescription] = [], pip: THEOplayerSDK.PiPConfiguration?, ads: THEOplayerSDK.AdsConfiguration? = nil, ui: THEOplayerSDK.UIConfiguration? = nil, cast: THEOplayerSDK.CastConfiguration? = nil, hlsDateRange: Swift.Bool? = nil, verizonMedia: THEOplayerSDK.VerizonMediaConfiguration? = nil)
  public init(chromeless: Swift.Bool = false, defaultCSS: Swift.Bool = true, cssPaths: [Swift.String] = [], jsPaths: [Swift.String] = [], jsPathsPre: [Swift.String] = [], analytics: [THEOplayerSDK.AnalyticsDescription] = [], pip: THEOplayerSDK.PiPConfiguration?, ads: THEOplayerSDK.AdsConfiguration? = nil, ui: THEOplayerSDK.UIConfiguration? = nil, cast: THEOplayerSDK.CastConfiguration? = nil, hlsDateRange: Swift.Bool? = nil, verizonMedia: THEOplayerSDK.VerizonMediaConfiguration? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc public class TimeRange : ObjectiveC.NSObject {
  @objc public var start: Swift.Double {
    get
    }
  @objc public var end: Swift.Double {
    get
    }
  @objc override dynamic public init()
  @objc deinit
}
public class CastConfiguration : Swift.Encodable {
  public init(strategy: THEOplayerSDK.CastStrategy?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public enum CastStrategy : Swift.String, Swift.Encodable {
  case auto
  case manual
  case disabled
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct FullscreenEventTypes {
  public static var ASPECT_RATIO_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.AspectRatioChangeEvent>
}
public protocol Cast : THEOplayerSDK.EventDispatcherProtocol {
  var casting: Swift.Bool { get }
  var chromecast: THEOplayerSDK.Chromecast? { get }
  var airPlay: THEOplayerSDK.AirPlay? { get }
}
extension NSNotification.Name {
  public static let PictureInPictureMoved: Foundation.Notification.Name
}
public let PictureInPictureOldCornerUserInfoKey: Swift.String
public let PictureInPictureNewCornerUserInfoKey: Swift.String
public class VimondDRMConfiguration : THEOplayerSDK.FairPlayDRMConfiguration {
  public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = nil)
  required public init(from decoder: Swift.Decoder) throws
  override public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = super, licenseType: THEOplayerSDK.LicenseType? = super)
  @objc deinit
}
public class AxinomDRMConfiguration : THEOplayerSDK.FairPlayDRMConfiguration {
  public var token: Swift.String
  public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, token: Swift.String, headers: [[Swift.String : Swift.String]]? = nil)
  override public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  override public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = super, licenseType: THEOplayerSDK.LicenseType? = super)
  @objc deinit
}
public struct YospaceServerSideAdInsertionConfiguration : THEOplayerSDK.ServerSideAdInsertionConfiguration, Swift.Codable {
  public var integration: THEOplayerSDK.SSAIIntegrationId?
  public let streamType: THEOplayerSDK.StreamType
  public let logLevel: THEOplayerSDK.YospaceLogLevelConfiguration
  public init(streamType: THEOplayerSDK.StreamType = StreamType.live, logLevel: THEOplayerSDK.YospaceLogLevelConfiguration = YospaceLogLevelConfiguration())
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct YospaceLogLevelConfiguration : Swift.Codable {
  public let polling: Swift.Bool
  public let id3Tags: Swift.Bool
  public let parsing: Swift.Bool
  public let reports: Swift.Bool
  public let http: Swift.Bool
  public let rawXml: Swift.Bool
  public init(polling: Swift.Bool = false, id3Tags: Swift.Bool = false, parsing: Swift.Bool = false, reports: Swift.Bool = false, http: Swift.Bool = false, rawXml: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class GoogleDAIConfiguration : THEOplayerSDK.ServerSideAdInsertionConfiguration, Swift.Codable {
  public var integration: THEOplayerSDK.SSAIIntegrationId?
  public var availabilityType: THEOplayerSDK.StreamType
  public var apiKey: Swift.String
  public var authToken: Swift.String?
  public var streamActivityMonitorID: Swift.String?
  public var adTagParameters: [Swift.String : Swift.String]?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc public class TextTrackDescription : ObjectiveC.NSObject, Swift.Codable {
  public var isDefault: Swift.Bool?
  public var kind: THEOplayerSDK.TextTrackKind?
  @objc public var src: Foundation.URL
  @objc public var srclang: Swift.String
  @objc public var label: Swift.String?
  public var format: THEOplayerSDK.TextTrackFormat?
  public init(src: Swift.String, srclang: Swift.String, isDefault: Swift.Bool? = nil, kind: THEOplayerSDK.TextTrackKind? = nil, label: Swift.String? = nil, format: THEOplayerSDK.TextTrackFormat? = nil)
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class Promise : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public protocol Track : THEOplayerSDK.EventDispatcherProtocol {
  var kind: Swift.String { get }
  var language: Swift.String { get }
  var label: Swift.String { get }
  var id: Swift.String { get }
  var uid: Swift.Int { get }
}
extension SourceDescription {
  public var ads: [THEOplayerSDK.AdDescription]? {
    get
    set
  }
  public var analytics: [THEOplayerSDK.AnalyticsDescription]? {
    get
    set
  }
  convenience public init(sources: [THEOplayerSDK.TypedSource], ads: [THEOplayerSDK.AdDescription]? = nil, textTracks: [THEOplayerSDK.TextTrackDescription]? = nil, poster: Swift.String? = nil, analytics: [THEOplayerSDK.AnalyticsDescription]? = [], metadata: THEOplayerSDK.MetadataDescription? = nil)
  convenience public init(source: THEOplayerSDK.TypedSource, ads: [THEOplayerSDK.AdDescription]? = nil, textTracks: [THEOplayerSDK.TextTrackDescription]? = nil, poster: Swift.String? = nil, analytics: [THEOplayerSDK.AnalyticsDescription]? = [], metadata: THEOplayerSDK.MetadataDescription? = nil)
}
public enum OmidFriendlyObstructionPurpose {
  case closeAd
  case mediaControls
  case notVisible
  case other
  public static func == (a: THEOplayerSDK.OmidFriendlyObstructionPurpose, b: THEOplayerSDK.OmidFriendlyObstructionPurpose) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct NetworkEventTypes {
  public static var ERROR: THEOplayerSDK.EventType<THEOplayerSDK.NetworkErrorEvent>
}
public class THEOplayer : THEOplayerSDK.EventDispatcherProtocol {
  public var isDestroyed: Swift.Bool {
    get
    }
  public init(configuration: THEOplayerSDK.THEOplayerConfiguration? = nil)
  convenience public init(with frame: CoreGraphics.CGRect, configuration: THEOplayerSDK.THEOplayerConfiguration? = nil)
  public static var version: Swift.String {
    get
  }
  public static var playerSuiteVersion: Swift.String {
    get
  }
  public var frame: CoreGraphics.CGRect {
    get
    set
  }
  public var bounds: CoreGraphics.CGRect {
    get
    set
  }
  public var center: CoreGraphics.CGPoint {
    get
    set
  }
  public var autoresizingMask: UIKit.UIView.AutoresizingMask {
    get
    set
  }
  public var abr: THEOplayerSDK.ABRConfiguration {
    get
    set
  }
  public var network: THEOplayerSDK.Network {
    get
  }
  public var textTracks: THEOplayerSDK.TextTrackList {
    get
  }
  public var audioTracks: THEOplayerSDK.AudioTrackList {
    get
  }
  public var videoTracks: THEOplayerSDK.VideoTrackList {
    get
  }
  public var duration: Swift.Double? {
    get
  }
  public var autoplay: Swift.Bool {
    get
    set
  }
  public var source: THEOplayerSDK.SourceDescription? {
    get
    set
  }
  public var src: Swift.String? {
    get
  }
  public var volume: Swift.Float {
    get
    set
  }
  public var muted: Swift.Bool {
    get
    set
  }
  public var seeking: Swift.Bool {
    get
  }
  public var paused: Swift.Bool {
    get
  }
  public var ended: Swift.Bool {
    get
  }
  public var preload: THEOplayerSDK.Preload {
    get
  }
  public var playbackRate: Swift.Double {
    get
  }
  public var presentationMode: THEOplayerSDK.PresentationMode {
    get
    set
  }
  public var readyState: THEOplayerSDK.ReadyState {
    get
  }
  public var error: Swift.String? {
    get
  }
  public static var automaticallyManageAudioSession: Swift.Bool {
    get
    set
  }
  public func play()
  public func pause()
  public func stop(completionHandler: ((Swift.Bool?, Swift.Error?) -> Swift.Void)? = nil)
  public func addEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: @escaping (E) -> ()) -> THEOplayerSDK.EventListener where E : THEOplayerSDK.EventProtocol
  public func removeEventListener<E>(type: THEOplayerSDK.EventType<E>, listener: THEOplayerSDK.EventListener) where E : THEOplayerSDK.EventProtocol
  public func requestCurrentTime(completionHandler: @escaping (Swift.Double?, Swift.Error?) -> Swift.Void)
  public func setCurrentTime(_ newValue: Swift.Double, completionHandler: ((Any?, Swift.Error?) -> Swift.Void)? = nil)
  public func requestVideoHeight(completionHandler: @escaping (Swift.Int?, Swift.Error?) -> Swift.Void)
  public func requestVideoWidth(completionHandler: @escaping (Swift.Int?, Swift.Error?) -> Swift.Void)
  public func setPreload(_ newValue: THEOplayerSDK.Preload, completionHandler: ((Any?, Swift.Error?) -> Swift.Void)? = nil)
  public func requestCurrentProgramDateTime(completionHandler: @escaping (Foundation.Date?, Swift.Error?) -> Swift.Void)
  public func setCurrentProgramDateTime(_ newValue: Foundation.Date, completionHandler: ((Any?, Swift.Error?) -> Swift.Void)? = nil)
  public func setPlaybackRate(_ newValue: Swift.Double, completionHandler: ((Any?, Swift.Error?) -> Swift.Void)? = nil)
  public func requestBuffered(completionHandler: @escaping ([THEOplayerSDK.TimeRange]?, Swift.Error?) -> Swift.Void)
  public func requestPlayed(completionHandler: @escaping ([THEOplayerSDK.TimeRange]?, Swift.Error?) -> Swift.Void)
  public func addAsSubview(of view: UIKit.UIView)
  public func insertAsSubview(of view: UIKit.UIView, at: Swift.Int)
  public func insertAsSubview(of view: UIKit.UIView, belowSubview siblingSubview: UIKit.UIView)
  public func insertAsSubview(of view: UIKit.UIView, aboveSubview siblingSubview: UIKit.UIView)
  public func isContained(in views: [UIKit.UIView]) -> Swift.Bool
  public func requestMetrics(completionHandler: @escaping (Any?, Swift.Error?) -> Swift.Void)
  public func requestSeekable(completionHandler: @escaping ([THEOplayerSDK.TimeRange]?, Swift.Error?) -> Swift.Void)
  public func destroy()
  @objc deinit
}
public class AirPlayEvent : THEOplayerSDK.EventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  @objc deinit
}
public class AirPlayStateChangeEvent : THEOplayerSDK.AirPlayEvent {
  public var state: THEOplayerSDK.PlayerCastState? {
    get
    }
  @objc deinit
}
public protocol CompanionAd {
  var adSlotId: Swift.String? { get }
  var altText: Swift.String? { get }
  var clickThrough: Swift.String? { get }
  var height: Swift.Int? { get }
  var resourceURI: Swift.String? { get }
  var width: Swift.Int? { get }
  var type: Swift.String { get }
}
public enum AgamaServiceName : Swift.String, Swift.Codable {
  case live
  case svod
  case nvod
  case tvod
  case avod
  case catchuptv
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public class AgamaSourceConfiguration : ObjectiveC.NSObject, THEOplayerSDK.AnalyticsDescription {
  @objc public var asset: Swift.String {
    get
    }
  public var streamType: THEOplayerSDK.StreamType {
    get
    }
  public var serviceName: THEOplayerSDK.AgamaServiceName? {
    get
    }
  @objc public var cdn: Swift.String? {
    get
    }
  @objc public var contentTitle: Swift.String? {
    get
    }
  @objc public var contentType: Swift.String? {
    get
    }
  @objc public var contentDescription: Swift.String? {
    get
    }
  public var integration: THEOplayerSDK.AnalyticsIntegration?
  public init(asset: Swift.String, streamType: THEOplayerSDK.StreamType, serviceName: THEOplayerSDK.AgamaServiceName? = nil, cdn: Swift.String? = nil, contentTitle: Swift.String? = nil, contentType: Swift.String? = nil, contentDescription: Swift.String? = nil)
  required convenience public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
extension THEOplayer {
  public var cast: THEOplayerSDK.Cast? {
    get
  }
}
public struct VREventTypes {
  public static var VR_DIRECTION_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.VRDirectionChangeEvent>
  public static var VR_STEREO_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.VRStereoChangeEvent>
}
public class WidevineDRMConfiguration : THEOplayerSDK.WidevineDRMConfigurationProtocol {
  public var widevine: THEOplayerSDK.KeySystemConfiguration
  public var integration: THEOplayerSDK.DRMIntegration?
  public var headers: [[Swift.String : Swift.String]]?
  public init(licenseAcquisitionURL: Swift.String, headers: [[Swift.String : Swift.String]]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public class StateChangeEvent : THEOplayerSDK.EventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var state: THEOplayerSDK.PlayerCastState {
    get
    }
  @objc deinit
}
public class CastErrorEvent : THEOplayerSDK.EventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var error: THEOplayerSDK.CastError {
    get
    }
  @objc deinit
}
public protocol TrackEventProtocol : THEOplayerSDK.EventProtocol {
  var track: THEOplayerSDK.Track { get }
}
public class TrackChangeEvent : THEOplayerSDK.TrackEventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var track: THEOplayerSDK.Track {
    get
    }
  @objc deinit
}
public class AddTrackEvent : THEOplayerSDK.TrackEventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var track: THEOplayerSDK.Track {
    get
    }
  @objc deinit
}
public class RemoveTrackEvent : THEOplayerSDK.TrackEventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  public var track: THEOplayerSDK.Track {
    get
    }
  @objc deinit
}
@objc public class ConvivaContentMetadata : ObjectiveC.NSObject, Swift.Codable {
  @objc public var assetName: Swift.String {
    get
    }
  public var live: Swift.Bool? {
    get
    }
  public var defaultBitrateKbps: Swift.Int? {
    get
    }
  @objc public var defaultResource: Swift.String? {
    get
    }
  public var duration: Swift.Int? {
    get
    }
  public var encodedFrameRate: Swift.Int? {
    get
    }
  @objc public var applicationName: Swift.String? {
    get
    }
  @objc public var viewerId: Swift.String? {
    get
    }
  @objc public var custom: [Swift.String : Swift.String]? {
    get
    }
  public init(assetName: Swift.String, live: Swift.Bool? = nil, defaultBitrateKbps: Swift.Int? = nil, defaultResource: Swift.String? = nil, duration: Swift.Int? = nil, encodedFrameRate: Swift.Int? = nil, applicationName: Swift.String? = nil, viewerId: Swift.String? = nil, custom: [Swift.String : Swift.String]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  required convenience public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc deinit
}
public protocol AnalyticsDescription : Swift.Decodable, Swift.Encodable {
  var integration: THEOplayerSDK.AnalyticsIntegration? { get }
}
public enum AnalyticsIntegration : Swift.String, Swift.Codable {
  case youbora
  case moat
  case conviva
  case agama
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct TextTrackListEventTypes {
  public static var ADD_TRACK: THEOplayerSDK.EventType<THEOplayerSDK.AddTrackEvent>
  public static var REMOVE_TRACK: THEOplayerSDK.EventType<THEOplayerSDK.RemoveTrackEvent>
  public static var CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.TrackChangeEvent>
}
@objc public class AgamaPlayerConfiguration : ObjectiveC.NSObject, THEOplayerSDK.AnalyticsDescription {
  public var integration: THEOplayerSDK.AnalyticsIntegration?
  @objc public var config: Swift.String {
    get
    }
  public var logLevel: THEOplayerSDK.AgamaLogging {
    get
    }
  @objc public var application: Swift.String {
    get
    }
  @objc public var applicationVersion: Swift.String {
    get
    }
  @objc public var userAccountID: Swift.String? {
    get
    }
  public init(config: Swift.String, logLevel: THEOplayerSDK.AgamaLogging = .fatal, application: Swift.String? = nil, applicationVersion: Swift.String? = nil, userAccountID: Swift.String? = nil)
  required convenience public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
public enum AgamaLogging : Swift.Int32, Swift.Codable {
  case fatal
  case error
  case warning
  case info
  case debug
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
public protocol AirPlay : THEOplayerSDK.EventDispatcherProtocol {
  var casting: Swift.Bool { get }
  var state: THEOplayerSDK.PlayerCastState { get }
  func start()
  func stop()
}
public class CacheEvent : THEOplayerSDK.EventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  @objc deinit
}
public class CacheStateChangeEvent : THEOplayerSDK.CacheEvent {
  @objc deinit
}
public class XstreamDRMConfiguration : THEOplayerSDK.FairPlayDRMConfiguration {
  public var ticketAcquisitionURL: Swift.String
  public var sessionId: Swift.String?
  public var streamId: Swift.String
  public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, ticketAcquisitionURL: Swift.String, streamId: Swift.String, sessionId: Swift.String? = nil, headers: [[Swift.String : Swift.String]]? = nil, licenseType: THEOplayerSDK.LicenseType = .temporary)
  override public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  override public init(licenseAcquisitionURL: Swift.String, certificateURL: Swift.String, headers: [[Swift.String : Swift.String]]? = super, licenseType: THEOplayerSDK.LicenseType? = super)
  @objc deinit
}
public struct AirPlayEventTypes {
  public static var STATE_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.AirPlayStateChangeEvent>
}
public struct RelatedContentEventTypes {
  public static var RELATED_CONTENT_CHANGE: THEOplayerSDK.EventType<THEOplayerSDK.RelatedContentChangeEvent>
  public static var RELATED_CONTENT_SHOW: THEOplayerSDK.EventType<THEOplayerSDK.UiRelatedContentShowEvent>
  public static var RELATED_CONTENT_HIDE: THEOplayerSDK.EventType<THEOplayerSDK.UiRelatedContentHideEvent>
}
public class RelatedContentEvent : THEOplayerSDK.EventProtocol {
  public var type: Swift.String {
    get
    }
  public var date: Foundation.Date {
    get
    }
  @objc deinit
}
public class RelatedContentChangeEvent : THEOplayerSDK.RelatedContentEvent {
  @objc deinit
}
public class UiRelatedContentShowEvent : THEOplayerSDK.RelatedContentEvent {
  @objc deinit
}
public class UiRelatedContentHideEvent : THEOplayerSDK.RelatedContentEvent {
  @objc deinit
}
@objc public class MoatOptions : ObjectiveC.NSObject, THEOplayerSDK.AnalyticsDescription {
  public var integration: THEOplayerSDK.AnalyticsIntegration?
  @objc convenience public init(partnerCode: Swift.String, locationServicesEnabled: Swift.Bool = true, IDFACollectionEnabled: Swift.Bool = true, debugLoggingEnabled: Swift.Bool = false)
  required convenience public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public func serializeObjectToJSON<T>(object: T, dateEncodingStrategy: Foundation.JSONEncoder.DateEncodingStrategy? = nil) -> Swift.String where T : Swift.Encodable
extension THEOplayerSDK.AdPreloadType : Swift.Equatable {}
extension THEOplayerSDK.AdPreloadType : Swift.Hashable {}
extension THEOplayerSDK.AdPreloadType : Swift.RawRepresentable {}
extension THEOplayerSDK.ChromecastMetadataType : Swift.Equatable {}
extension THEOplayerSDK.ChromecastMetadataType : Swift.Hashable {}
extension THEOplayerSDK.ChromecastMetadataType : Swift.RawRepresentable {}
extension THEOplayerSDK.ErrorCode : Swift.Equatable {}
extension THEOplayerSDK.ErrorCode : Swift.Hashable {}
extension THEOplayerSDK.ErrorCode : Swift.RawRepresentable {}
extension THEOplayerSDK.ReadyState : Swift.Equatable {}
extension THEOplayerSDK.ReadyState : Swift.Hashable {}
extension THEOplayerSDK.ReadyState : Swift.RawRepresentable {}
extension THEOplayerSDK.LicenseType : Swift.Equatable {}
extension THEOplayerSDK.LicenseType : Swift.Hashable {}
extension THEOplayerSDK.LicenseType : Swift.RawRepresentable {}
extension THEOplayerSDK.DRMIntegration : Swift.Equatable {}
extension THEOplayerSDK.DRMIntegration : Swift.Hashable {}
extension THEOplayerSDK.DRMIntegration : Swift.RawRepresentable {}
extension THEOplayerSDK.Preload : Swift.Hashable {}
extension THEOplayerSDK.Preload : Swift.RawRepresentable {}
extension THEOplayerSDK.AspectRatio : Swift.Equatable {}
extension THEOplayerSDK.AspectRatio : Swift.Hashable {}
extension THEOplayerSDK.AdIntegration : Swift.Equatable {}
extension THEOplayerSDK.AdIntegration : Swift.Hashable {}
extension THEOplayerSDK.AdIntegration : Swift.RawRepresentable {}
extension THEOplayerSDK.SkippedAdStrategy : Swift.Equatable {}
extension THEOplayerSDK.SkippedAdStrategy : Swift.Hashable {}
extension THEOplayerSDK.SkippedAdStrategy : Swift.RawRepresentable {}
extension THEOplayerSDK.TextTrackMode : Swift.Equatable {}
extension THEOplayerSDK.TextTrackMode : Swift.Hashable {}
extension THEOplayerSDK.TextTrackMode : Swift.RawRepresentable {}
extension THEOplayerSDK.PresentationMode : Swift.Hashable {}
extension THEOplayerSDK.PresentationMode : Swift.RawRepresentable {}
extension THEOplayerSDK.CacheStatus : Swift.Equatable {}
extension THEOplayerSDK.CacheStatus : Swift.Hashable {}
extension THEOplayerSDK.CacheStatus : Swift.RawRepresentable {}
extension THEOplayerSDK.CachingTaskStatus : Swift.Equatable {}
extension THEOplayerSDK.CachingTaskStatus : Swift.Hashable {}
extension THEOplayerSDK.CachingTaskStatus : Swift.RawRepresentable {}
extension THEOplayerSDK.THEOErrorCode : Swift.Equatable {}
extension THEOplayerSDK.THEOErrorCode : Swift.Hashable {}
extension THEOplayerSDK.THEOErrorCode : Swift.RawRepresentable {}
extension THEOplayerSDK.TextTrackKind : Swift.Hashable {}
extension THEOplayerSDK.TextTrackKind : Swift.RawRepresentable {}
extension THEOplayerSDK.TextTrackFormat : Swift.Hashable {}
extension THEOplayerSDK.TextTrackFormat : Swift.RawRepresentable {}
extension THEOplayerSDK.CrossOrigin : Swift.Equatable {}
extension THEOplayerSDK.CrossOrigin : Swift.Hashable {}
extension THEOplayerSDK.CrossOrigin : Swift.RawRepresentable {}
extension THEOplayerSDK.SourceIntegration : Swift.Equatable {}
extension THEOplayerSDK.SourceIntegration : Swift.Hashable {}
extension THEOplayerSDK.SourceIntegration : Swift.RawRepresentable {}
extension THEOplayerSDK.SSAIIntegrationId : Swift.Equatable {}
extension THEOplayerSDK.SSAIIntegrationId : Swift.Hashable {}
extension THEOplayerSDK.SSAIIntegrationId : Swift.RawRepresentable {}
extension THEOplayerSDK.StreamType : Swift.Equatable {}
extension THEOplayerSDK.StreamType : Swift.Hashable {}
extension THEOplayerSDK.StreamType : Swift.RawRepresentable {}
extension THEOplayerSDK.StereoMode : Swift.Equatable {}
extension THEOplayerSDK.StereoMode : Swift.Hashable {}
extension THEOplayerSDK.StereoMode : Swift.RawRepresentable {}
extension THEOplayerSDK.DateRangeCustomAttributesError : Swift.Equatable {}
extension THEOplayerSDK.DateRangeCustomAttributesError : Swift.Hashable {}
extension THEOplayerSDK.AdIntegrationKind : Swift.Equatable {}
extension THEOplayerSDK.AdIntegrationKind : Swift.Hashable {}
extension THEOplayerSDK.AdIntegrationKind : Swift.RawRepresentable {}
extension THEOplayerSDK.ABRStrategyType : Swift.Equatable {}
extension THEOplayerSDK.ABRStrategyType : Swift.Hashable {}
extension THEOplayerSDK.ABRStrategyType : Swift.RawRepresentable {}
extension THEOplayerSDK.PlayerCastState : Swift.Equatable {}
extension THEOplayerSDK.PlayerCastState : Swift.Hashable {}
extension THEOplayerSDK.PlayerCastState : Swift.RawRepresentable {}
extension THEOplayerSDK.PictureInPictureCorner : Swift.Equatable {}
extension THEOplayerSDK.PictureInPictureCorner : Swift.Hashable {}
extension THEOplayerSDK.CastStrategy : Swift.Equatable {}
extension THEOplayerSDK.CastStrategy : Swift.Hashable {}
extension THEOplayerSDK.CastStrategy : Swift.RawRepresentable {}
extension THEOplayerSDK.OmidFriendlyObstructionPurpose : Swift.Equatable {}
extension THEOplayerSDK.OmidFriendlyObstructionPurpose : Swift.Hashable {}
extension THEOplayerSDK.AgamaServiceName : Swift.Equatable {}
extension THEOplayerSDK.AgamaServiceName : Swift.Hashable {}
extension THEOplayerSDK.AgamaServiceName : Swift.RawRepresentable {}
extension THEOplayerSDK.AnalyticsIntegration : Swift.Equatable {}
extension THEOplayerSDK.AnalyticsIntegration : Swift.Hashable {}
extension THEOplayerSDK.AnalyticsIntegration : Swift.RawRepresentable {}
extension THEOplayerSDK.AgamaLogging : Swift.Equatable {}
extension THEOplayerSDK.AgamaLogging : Swift.Hashable {}
extension THEOplayerSDK.AgamaLogging : Swift.RawRepresentable {}
